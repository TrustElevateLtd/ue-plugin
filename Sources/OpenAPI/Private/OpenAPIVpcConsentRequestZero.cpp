/**
 * prodapi.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVpcConsentRequestZero.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIVpcConsentRequestZero::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Claim.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("claim")); WriteJsonValue(Writer, Claim.GetValue());
	}
	if (Subject.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subject")); WriteJsonValue(Writer, Subject.GetValue());
	}
	if (Ttl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("ttl")); WriteJsonValue(Writer, Ttl.GetValue());
	}
	if (NotifyContact.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("notifyContact")); WriteJsonValue(Writer, NotifyContact.GetValue());
	}
	if (NotifyVisitUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("notifyVisitUrl")); WriteJsonValue(Writer, NotifyVisitUrl.GetValue());
	}
	if (CallbackUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("callbackUrl")); WriteJsonValue(Writer, CallbackUrl.GetValue());
	}
	if (InfoUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("infoUrl")); WriteJsonValue(Writer, InfoUrl.GetValue());
	}
	if (CustomId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("customId")); WriteJsonValue(Writer, CustomId.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIVpcConsentRequestZero::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("claim"), Claim);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subject"), Subject);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("ttl"), Ttl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("notifyContact"), NotifyContact);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("notifyVisitUrl"), NotifyVisitUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("callbackUrl"), CallbackUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("infoUrl"), InfoUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("customId"), CustomId);

	return ParseSuccess;
}

}
