/**
 * prodapi.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVPCApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIVPCApi::VPCCreateConsentRequest::ComputePath() const
{
	FString Path(TEXT("/v3/awpr/consent"));
	return Path;
}

void OpenAPIVPCApi::VPCCreateConsentRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIVPCApi::VPCCreateConsentResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("A successful response."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An unexpected error response."));
		break;
	}
}

bool OpenAPIVPCApi::VPCCreateConsentResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIVPCApi::VPCGetConsentRequest::ComputePath() const
{
	FString Path(TEXT("/v3/consent"));
	TArray<FString> QueryParams;
	if(Contact.IsSet())
	{
		QueryParams.Add(FString(TEXT("contact=")) + ToUrlString(Contact.GetValue()));
	}
	if(Ttl.IsSet())
	{
		QueryParams.Add(FString(TEXT("ttl=")) + ToUrlString(Ttl.GetValue()));
	}
	if(Dob.IsSet())
	{
		QueryParams.Add(FString(TEXT("dob=")) + ToUrlString(Dob.GetValue()));
	}
	if(Subject.IsSet())
	{
		QueryParams.Add(FString(TEXT("subject=")) + CollectionToUrlString_multi(Subject.GetValue(), TEXT("subject")));
	}
	if(Name.IsSet())
	{
		QueryParams.Add(FString(TEXT("name=")) + ToUrlString(Name.GetValue()));
	}
	if(VisitUrl.IsSet())
	{
		QueryParams.Add(FString(TEXT("visitUrl=")) + ToUrlString(VisitUrl.GetValue()));
	}
	if(CallbackUrl.IsSet())
	{
		QueryParams.Add(FString(TEXT("callbackUrl=")) + ToUrlString(CallbackUrl.GetValue()));
	}
	if(InfoUrl.IsSet())
	{
		QueryParams.Add(FString(TEXT("infoUrl=")) + ToUrlString(InfoUrl.GetValue()));
	}
	if(CustomId.IsSet())
	{
		QueryParams.Add(FString(TEXT("customId=")) + ToUrlString(CustomId.GetValue()));
	}
	if(CustomerId.IsSet())
	{
		QueryParams.Add(FString(TEXT("customerId=")) + ToUrlString(CustomerId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIVPCApi::VPCGetConsentRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIVPCApi::VPCGetConsentResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("A successful response."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An unexpected error response."));
		break;
	}
}

bool OpenAPIVPCApi::VPCGetConsentResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIVPCApi::VPCGetConsentZeroRequest::ComputePath() const
{
	FString Path(TEXT("/v3/consent-zero"));
	return Path;
}

void OpenAPIVPCApi::VPCGetConsentZeroRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIVPCApi::VPCGetConsentZeroResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("A successful response."));
		break;
	case 0:
	default:
		SetResponseString(TEXT("An unexpected error response."));
		break;
	}
}

bool OpenAPIVPCApi::VPCGetConsentZeroResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
